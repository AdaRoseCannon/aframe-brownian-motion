{"version":3,"file":"aframe-brownian-motion.js","sources":["../src/noise.js","../src/aframe-brownian-motion.js"],"sourcesContent":["/* jshint esversion: 9, varstmt:true */\n/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n * \n * Modified by AdaRoseCannon 2022-14-07 for AFrame\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\nclass Grad {\n\tconstructor(x, y, z) {\n\t\tthis.x = x; this.y = y; this.z = z;\n\t}\n\tdot2(x, y) {\n\t\treturn this.x * x + this.y * y;\n\t}\n\tdot3(x, y, z) {\n\t\treturn this.x * x + this.y * y + this.z * z;\n\t}\n}\n\nconst grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),\nnew Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),\nnew Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n\nconst p = new Uint8Array([151, 160, 137, 91, 90, 15,\n\t131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n\t190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n\t88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n\t77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n\t102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n\t135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n\t5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n\t223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n\t129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n\t251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n\t49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n\t138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]);\n// To remove the need for index wrapping, double the permutation table length\nconst perm = new Uint16Array(512);\nconst gradP = Array(512);\n\n// This isn't a very good seeding function, but it works ok. It supports 2^16\n// different seed values. Write something better if you need more seeds.\nexport function seed (seed) {\n\tif (seed > 0 && seed < 1) {\n\t\t// Scale the seed out\n\t\tseed *= 65536;\n\t}\n\n\tseed = Math.floor(seed);\n\tif (seed < 256) {\n\t\tseed |= seed << 8;\n\t}\n\n\tfor (let i = 0; i < 256; i++) {\n\t\tlet v;\n\t\tif (i & 1) {\n\t\t\tv = p[i] ^ (seed & 255);\n\t\t} else {\n\t\t\tv = p[i] ^ ((seed >> 8) & 255);\n\t\t}\n\n\t\tperm[i] = perm[i + 256] = v;\n\t\tgradP[i] = gradP[i + 256] = grad3[v % 12];\n\t}\n}\n\nseed(0);\n\n/*\nfor(const i=0; i<256; i++) {\n\tperm[i] = perm[i + 256] = p[i];\n\tgradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n}*/\n\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\nconst G2 = (3 - Math.sqrt(3)) / 6;\n\nconst F3 = 1 / 3;\nconst G3 = 1 / 6;\n\n// 2D simplex noise\nexport function simplex2 (xin, yin) {\n\tlet n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tconst s = (xin + yin) * F2; // Hairy factor for 2D\n\tlet i = Math.floor(xin + s);\n\tlet j = Math.floor(yin + s);\n\tconst t = (i + j) * G2;\n\tconst x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\tconst y0 = yin - j + t;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tlet i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\t\ti1 = 1; j1 = 0;\n\t} else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t\ti1 = 0; j1 = 1;\n\t}\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tconst y1 = y0 - j1 + G2;\n\tconst x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tconst y2 = y0 - 1 + 2 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\ti &= 255;\n\tj &= 255;\n\tconst gi0 = gradP[i + perm[j]];\n\tconst gi1 = gradP[i + i1 + perm[j + j1]];\n\tconst gi2 = gradP[i + 1 + perm[j + 1]];\n\t// Calculate the contribution from the three corners\n\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif (t0 < 0) {\n\t\tn0 = 0;\n\t} else {\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n\t}\n\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif (t1 < 0) {\n\t\tn1 = 0;\n\t} else {\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * gi1.dot2(x1, y1);\n\t}\n\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif (t2 < 0) {\n\t\tn2 = 0;\n\t} else {\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * gi2.dot2(x2, y2);\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70 * (n0 + n1 + n2);\n}\n\n// 3D simplex noise\nexport function simplex3 (xin, yin, zin) {\n\tlet n0, n1, n2, n3; // Noise contributions from the four corners\n\n\t// Skew the input space to determine which simplex cell we're in\n\tconst s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\tlet i = Math.floor(xin + s);\n\tlet j = Math.floor(yin + s);\n\tlet k = Math.floor(zin + s);\n\n\tconst t = (i + j + k) * G3;\n\tconst x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\tconst y0 = yin - j + t;\n\tconst z0 = zin - k + t;\n\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tlet i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tlet i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif (x0 >= y0) {\n\t\tif (y0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\n\t\telse if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; }\n\t\telse { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; }\n\t} else {\n\t\tif (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; }\n\t\telse if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; }\n\t\telse { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tconst x1 = x0 - i1 + G3; // Offsets for second corner\n\tconst y1 = y0 - j1 + G3;\n\tconst z1 = z0 - k1 + G3;\n\n\tconst x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\tconst y2 = y0 - j2 + 2 * G3;\n\tconst z2 = z0 - k2 + 2 * G3;\n\n\tconst x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\tconst y3 = y0 - 1 + 3 * G3;\n\tconst z3 = z0 - 1 + 3 * G3;\n\n\t// Work out the hashed gradient indices of the four simplex corners\n\ti &= 255;\n\tj &= 255;\n\tk &= 255;\n\tconst gi0 = gradP[i + perm[j + perm[k]]];\n\tconst gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n\tconst gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n\tconst gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\n\n\t// Calculate the contribution from the four corners\n\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif (t0 < 0) {\n\t\tn0 = 0;\n\t} else {\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n\t}\n\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif (t1 < 0) {\n\t\tn1 = 0;\n\t} else {\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n\t}\n\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif (t2 < 0) {\n\t\tn2 = 0;\n\t} else {\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n\t}\n\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif (t3 < 0) {\n\t\tn3 = 0;\n\t} else {\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 32 * (n0 + n1 + n2 + n3);\n\n}\n\n// ##### Perlin noise stuff\n\nfunction fade(t) {\n\treturn t * t * t * (t * (t * 6 - 15) + 10);\n}\n\nfunction lerp(a, b, t) {\n\treturn (1 - t) * a + t * b;\n}\n\n// 2D Perlin Noise\nexport function perlin2 (x, y) {\n\t// Find unit grid cell containing point\n\tlet X = Math.floor(x), Y = Math.floor(y);\n\t// Get relative xy coordinates of point within that cell\n\tx = x - X; y = y - Y;\n\t// Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\tX = X & 255; Y = Y & 255;\n\n\t// Calculate noise contributions from each of the four corners\n\tconst n00 = gradP[X + perm[Y]].dot2(x, y);\n\tconst n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n\tconst n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n\tconst n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\n\n\t// Compute the fade curve value for x\n\tconst u = fade(x);\n\n\t// Interpolate the four results\n\treturn lerp(\n\t\tlerp(n00, n10, u),\n\t\tlerp(n01, n11, u),\n\t\tfade(y));\n}\n\n// 3D Perlin Noise\nexport function perlin3 (x, y, z) {\n\t// Find unit grid cell containing point\n\tlet X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n\t// Get relative xyz coordinates of point within that cell\n\tx = x - X; y = y - Y; z = z - Z;\n\t// Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\tX = X & 255; Y = Y & 255; Z = Z & 255;\n\n\t// Calculate noise contributions from each of the eight corners\n\tconst n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n\tconst n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n\tconst n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n\tconst n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n\tconst n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n\tconst n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n\tconst n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n\tconst n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\n\n\t// Compute the fade curve value for x, y, z\n\tconst u = fade(x);\n\tconst v = fade(y);\n\tconst w = fade(z);\n\n\t// Interpolate\n\treturn lerp(\n\t\tlerp(\n\t\t\tlerp(n000, n100, u),\n\t\t\tlerp(n001, n101, u), w),\n\t\tlerp(\n\t\t\tlerp(n010, n110, u),\n\t\t\tlerp(n011, n111, u), w),\n\t\tv);\n}\n","/* jshint esversion: 9, -W028 */\n/* For dealing with covering one object in another curves */\n/* global THREE, AFRAME */\n\nimport {perlin2, seed} from './noise.js';\n\nconst schema = {\n\tseed: {\n\t\tdefault: 0\n\t},\n\toctaves: {\n\t\tdefault: 2\n\t},\n\tpositionVariance: {\n\t\ttype: 'vec3',\n\t\tdefault: {x: 1, y: 1, z: 1}\n\t},\n\trotationVariance: {\n\t\ttype: 'vec3',\n\t\tdefault: {x: 10, y: 10, z: 10}\n\t},\n\tspeed: {\n\t\tdefault: 1\n\t}\n};\n\ndocumentation:\n(function () {\n\tschema.seed.description = `Random seed `;\n\tschema.octaves.description = `How fine grained the motion is`;\n\tschema.positionVariance.description = `How much it should be moved by`;\n\tschema.rotationVariance.description = `How much it should rotate by`;\n\tschema.speed.description = `Speed multiplier`;\n}());\n\nconst v2 = new THREE.Vector2();\nconst np = new THREE.Vector3();\nconst nr = new THREE.Vector3();\nconst nre = new THREE.Euler(0,0,0,'ZXY');\nconst nrq = new THREE.Quaternion();\nAFRAME.registerComponent('brownian-motion', {\n\tschema,\n\tdescription: `This component animates an object`,\n\tinit() {\n\t\tthis.initialPosition = new THREE.Vector3().copy(this.el.object3D.position);\n\t\tthis.initialQuaternion = new THREE.Quaternion().copy(this.el.object3D.quaternion);\n\t\tthis.positionOffset = new THREE.Vector3(\n\t\t\tMath.random()*2000 - 1000,\n\t\t\tMath.random()*2000 - 1000,\n\t\t\tMath.random()*2000 - 1000,\n\t\t);\n\t\tthis.rotationOffset = new THREE.Vector3(\n\t\t\tMath.random()*2000 - 1000,\n\t\t\tMath.random()*2000 - 1000,\n\t\t\tMath.random()*2000 - 1000,\n\t\t);\n\t},\n\tupdate() {\n\t\tseed(this.data.seed);\n\t},\n\tfbm(x, y, octave) {\n\t\tlet p = v2.set(x,y);\n\t\tlet f = 0.0;\n\t\tlet w = 0.5;\n\t\tfor (let i = 0; i < octave; i++) {\n\t\t\tf += w * perlin2(p.x, p.y);\n\t\t\tp.multiplyScalar(2.0);\n\t\t\tw *= 0.5;\n\t\t}\n\t\treturn f;\n\t},\n\ttick(time) {\n\n\t\tconst object3D = this.el.object3D;\n\n\t\tnp.set(\n\t\t\tthis.fbm(this.positionOffset.x, this.data.speed * time/1000, this.data.octaves),\n\t\t\tthis.fbm(this.positionOffset.y, this.data.speed * time/1000, this.data.octaves),\n\t\t\tthis.fbm(this.positionOffset.z, this.data.speed * time/1000, this.data.octaves)\n\t\t);\n\n\t\tnr.set(\n\t\t\tthis.fbm(this.rotationOffset.x, this.data.speed * time/1000, this.data.octaves),\n\t\t\tthis.fbm(this.rotationOffset.y, this.data.speed * time/1000, this.data.octaves),\n\t\t\tthis.fbm(this.rotationOffset.z, this.data.speed * time/1000, this.data.octaves)\n\t\t);\n\n\t\tnp.multiply(this.data.positionVariance).multiplyScalar(1 / 0.75);\n\t\tnr.multiply(this.data.rotationVariance).multiplyScalar(1 / 0.75);\n\n\t\t// transform.localPosition = _initialPosition + np;\n\t\tobject3D.position.copy(this.initialPosition).add(np);\n\t\t// var nrq = quaternion.EulerZXY(math.radians(nr));\n\t\t// transform.localRotation = math.mul(nrq, _initialRotation);\n\t\tnre.setFromVector3(nr);\n\t\tnrq.setFromEuler(nre);\n\t\tobject3D.quaternion.copy(this.initialQuaternion).multiply(nrq);\n\t},\n\tremove() {\n\t}\n});\n"],"names":[],"mappings":"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EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CAC7F,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CAC9F,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;CACjG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;CAC5F,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;CAC7F,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG;CAC9F,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE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"}